{
	"info": {
		"_postman_id": "b1518696-0e23-4cb0-8a24-994fdc233445",
		"name": "Damians Store - API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40115716"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response content type is JSON\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"response includes the created resource\", function () {",
							"    const username = pm.environment.get(\"U_NAME\");",
							"    const email = pm.environment.get(\"U_NAME\") + \"@example.com\";",
							"    pm.expect(jsonData.username).to.eql(username);",
							"    pm.expect(jsonData.email).to.eql(email);",
							"});",
							"",
							"pm.test(\"response has token\", function () {",
							"    pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\");",
							"});",
							"pm.test(\"user has correct role\", function () {",
							"    pm.expect(jsonData.role).to.eql(\"registered_user\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"email\": \"{{U_NAME}}@example.com\",\n    \"password\": \"{{U_PASSWORD}}\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/users",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"response has correct error\", function () {",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.context.errors).to.eql(\"Username or email already exists\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"email\": \"{{U_NAME}}@example.com\",\n    \"password\": \"{{U_PASSWORD}}\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/users",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Invalid Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"response has correct error\", function () {",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.eql(\"Validation failed\");",
							"    pm.expect(jsonData.errors[0]).to.eql(\"Email must be a valid email address\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}123\",\n    \"email\": \"{{U_NAME}}123@example\",\n    \"password\": \"{{U_PASSWORD}}\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/users",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const userResponse = pm.response.json();",
							"pm.test(\"Response contains correct user\", function () {",
							"    pm.expect(userResponse).to.eql({",
							"        username: pm.environment.get(\"U_NAME\") , ",
							"        email: pm.environment.get(\"U_NAME\") + \"@example.com\",",
							"        role: \"registered_user\"",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/users",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
							"    pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\");",
							"    pm.expect(jsonData).to.have.property(\"username\", pm.environment.get(\"U_NAME\"));",
							"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");",
							"    pm.environment.set(\"TOKEN\", jsonData.token);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{U_PASSWORD}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{U_NAME}}",
							"type": "string"
						},
						{
							"key": "undefined",
							"type": "any"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{U_NAME}}\",\n    \"password\": \"{{U_PASSWORD}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/users/login",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"name\": { \"type\": \"string\" },",
							"      \"display\": { \"type\": \"string\" },",
							"      \"subcategories\": {",
							"        \"type\": \"array\",",
							"        \"items\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"name\": { \"type\": \"string\" },",
							"            \"display\": { \"type\": \"string\" },",
							"            \"_id\": { \"type\": \"string\", \"pattern\": \"^[a-fA-F0-9]{24}$\" }",
							"          },",
							"          \"required\": [\"name\", \"display\", \"_id\"],",
							"          \"additionalProperties\": false",
							"        }",
							"      }",
							"    },",
							"    \"required\": [\"name\", \"display\", \"subcategories\"],",
							"    \"additionalProperties\": false",
							"  }",
							"};",
							"",
							"pm.test(\"Categories structure is valid\", function () {",
							"  const response = pm.response.json();",
							"  pm.expect(tv4.validate(response, jsonSchema)).to.be.true;",
							"",
							"  if (!tv4.validate(response, jsonSchema)) {",
							"    console.error(\"Schema validation failed:\", tv4.error);",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/categories/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"categories",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"name\": { \"type\": \"string\" },",
							"      \"image\": { \"type\": \"string\" },",
							"      \"description\": { \"type\": \"string\" },",
							"      \"rating\": { \"type\": \"number\" },",
							"      \"price\": { \"type\": \"number\" },",
							"      \"productId\": { \"type\": \"integer\" },",
							"      \"category\": { \"type\": \"string\" },",
							"      \"subcategory\": { \"type\": \"string\" },",
							"      \"badges\": {",
							"        \"type\": \"array\",",
							"        \"items\": { \"type\": \"string\" }",
							"      }",
							"    },",
							"    \"required\": [\"name\", \"image\", \"description\", \"rating\", \"price\", \"productId\", \"category\", \"subcategory\", \"badges\"],",
							"    \"additionalProperties\": false",
							"  }",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response structure matches schema\", function () {",
							"  const responseJson = pm.response.json();",
							"  const validate = tv4.validate(responseJson, jsonSchema);",
							"",
							"  pm.expect(validate).to.be.true;",
							"",
							"  if (!validate) {",
							"    console.error(\"Schema validation error:\", tv4.error);",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/products",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"name\": { \"type\": \"string\" },",
							"      \"image\": { \"type\": \"string\" },",
							"      \"description\": { \"type\": \"string\" },",
							"      \"rating\": { \"type\": \"number\" },",
							"      \"price\": { \"type\": \"number\" },",
							"      \"productId\": { \"type\": \"integer\" },",
							"      \"category\": { \"type\": \"string\" },",
							"      \"subcategory\": { \"type\": \"string\" },",
							"      \"badges\": {",
							"        \"type\": \"array\",",
							"        \"items\": { \"type\": \"string\" }",
							"      }",
							"    },",
							"    \"required\": [\"name\", \"image\", \"description\", \"rating\", \"price\", \"productId\", \"category\", \"subcategory\", \"badges\"],",
							"    \"additionalProperties\": false",
							"  }",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response structure matches schema\", function () {",
							"  const responseJson = pm.response.json();",
							"  const validate = tv4.validate(responseJson, jsonSchema);",
							"",
							"  pm.expect(validate).to.be.true;",
							"",
							"  if (!validate) {",
							"    console.error(\"Schema validation error:\", tv4.error);",
							"  }",
							"});",
							"",
							"pm.test(\"product are filtered correctly\", function () {",
							"    const jsonData = pm.response.json();",
							"    jsonData.forEach(product => {",
							"        pm.expect(product.category.toLowerCase()).to.eql(\"computers\");",
							"        pm.expect(product.subcategory.toLowerCase()).to.eql(\"laptops\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/products?subcategory=laptops&category=computers",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "subcategory",
							"value": "laptops"
						},
						{
							"key": "category",
							"value": "computers"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"name\": { \"type\": \"string\" },",
							"      \"image\": { \"type\": \"string\" },",
							"      \"description\": { \"type\": \"string\" },",
							"      \"rating\": { \"type\": \"number\" },",
							"      \"price\": { \"type\": \"number\" },",
							"      \"productId\": { \"type\": \"integer\" },",
							"      \"category\": { \"type\": \"string\" },",
							"      \"subcategory\": { \"type\": \"string\" },",
							"      \"badges\": {",
							"        \"type\": \"array\",",
							"        \"items\": { \"type\": \"string\" }",
							"      }",
							"    },",
							"    \"required\": [\"name\", \"image\", \"description\", \"rating\", \"price\", \"productId\", \"category\", \"subcategory\", \"badges\"],",
							"    \"additionalProperties\": false",
							"  }",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response structure matches schema\", function () {",
							"  const responseJson = pm.response.json();",
							"  const validate = tv4.validate(responseJson, jsonSchema);",
							"",
							"  pm.expect(validate).to.be.true;",
							"",
							"  if (!validate) {",
							"    console.error(\"Schema validation error:\", tv4.error);",
							"  }",
							"});",
							"pm.test(\"search result contains search phrase in name\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"    ",
							"    jsonData.forEach(category => {",
							"        pm.expect(category).to.have.property(\"name\");",
							"        pm.expect(category.name.toLowerCase()).to.contain('durian');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/products?search=durian",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "search",
							"value": "durian"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonSchema = {",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"name\": { \"type\": \"string\" },",
							"        \"image\": { \"type\": \"string\" },",
							"        \"description\": { \"type\": \"string\" },",
							"        \"rating\": { \"type\": \"number\" },",
							"        \"price\": { \"type\": \"number\" },",
							"        \"productId\": { \"type\": \"integer\" },",
							"        \"category\": { \"type\": \"string\" },",
							"        \"subcategory\": { \"type\": \"string\" },",
							"        \"badges\": {",
							"            \"type\": \"array\",",
							"            \"items\": { \"type\": \"string\" }",
							"        }",
							"    },",
							"    \"required\": [\"name\", \"image\", \"description\", \"rating\", \"price\", \"productId\", \"category\", \"subcategory\", \"badges\"],",
							"    \"additionalProperties\": false",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"Response matches schema\", function () {",
							"    const validate = tv4.validate(responseJson, jsonSchema);",
							"",
							"    pm.expect(validate).to.be.true;",
							"",
							"    if (!validate) {",
							"        console.error(\"Schema validation error:\", tv4.error);",
							"    }",
							"});",
							"",
							"pm.test(\"correct product was returned\", function () {",
							"    pm.expect(responseJson.name).to.eql(\"Snake 3D\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/products/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Inventory by Product ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains correct inventory data\", function () {",
							"    pm.expect(pm.response.json()).to.eql({",
							"        productId: 8,",
							"        quantity: 99999",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/inventory/8",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"inventory",
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product To Cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"cart is correctly updated\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"1\", 3);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"productId\": 1,\n  \"quantity\": 3,\n  \"operation\": \"add\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/cart",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Product From Cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"cart is correctly updated\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"1\", 2);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"productId\": 1,\n  \"quantity\": 1,\n  \"operation\": \"remove\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/cart",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cart contains products with correct quantity\", function () {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"1\", 2);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"productId\":1,\"quantity\":1}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/cart",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checkout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.environment.set(\"ORDER_REF\", jsonData.orderId);",
							"",
							"",
							"pm.test(\"Order was created successfully\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Order created successfully\");",
							"    pm.expect(jsonData).to.have.property(\"orderId\").that.is.a(\"string\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"productId\":1,\"quantity\":1}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/orders/checkout",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"orders",
						"checkout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonSchema = {",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"success\": { \"type\": \"boolean\" },",
							"        \"order\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"_id\": { \"type\": \"string\", \"pattern\": \"^[a-fA-F0-9]{24}$\" },",
							"                \"username\": { \"type\": \"string\" },",
							"                \"items\": {",
							"                    \"type\": \"array\",",
							"                    \"items\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\": {",
							"                            \"productId\": { \"type\": \"integer\" },",
							"                            \"name\": { \"type\": \"string\" },",
							"                            \"quantity\": { \"type\": \"number\" },",
							"                            \"price\": { \"type\": \"number\" },",
							"                            \"_id\": { \"type\": \"string\", \"pattern\": \"^[a-fA-F0-9]{24}$\" }",
							"                        },",
							"                        \"required\": [\"productId\", \"name\", \"quantity\", \"price\", \"_id\"],",
							"                        \"additionalProperties\": false",
							"                    }",
							"                },",
							"                \"totalPrice\": { \"type\": \"number\" },",
							"                \"status\": { \"type\": \"string\" },",
							"                \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"                \"__v\": { \"type\": \"integer\" }",
							"            },",
							"            \"required\": [\"_id\", \"username\", \"items\", \"totalPrice\", \"status\", \"createdAt\", \"__v\"],",
							"            \"additionalProperties\": false",
							"        }",
							"    },",
							"    \"required\": [\"success\", \"order\"],",
							"    \"additionalProperties\": false",
							"};",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response matches schema\", function () {",
							"    const responseJson = pm.response.json();",
							"    const validate = tv4.validate(responseJson, jsonSchema);",
							"",
							"    pm.expect(validate).to.be.true;",
							"",
							"    if (!validate) {",
							"        console.error(\"Schema validation error:\", tv4.error);",
							"    }",
							"});",
							"",
							"pm.test(\"Username is correct\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property(\"order\");",
							"    const username = pm.environment.get(\"U_NAME\");",
							"",
							"    pm.expect(responseJson.order).to.have.property(\"username\", username);",
							"});",
							"",
							"pm.test(\"Items array has one product with correct properties\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property(\"order\");",
							"    pm.expect(responseJson.order).to.have.property(\"items\").that.is.an(\"array\").with.lengthOf(1);",
							"",
							"    const item = responseJson.order.items[0];",
							"    pm.expect(item).to.have.property(\"productId\", 1);",
							"    pm.expect(item).to.have.property(\"name\", \"Snake 3D\");",
							"    pm.expect(item).to.have.property(\"quantity\", 2);",
							"});",
							"",
							"pm.test(\"Order status is pending\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property(\"order\");",
							"    pm.expect(responseJson.order).to.have.property(\"status\", \"pending\");",
							"});",
							"",
							"pm.test(\"Total price is correct\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property(\"order\");",
							"",
							"    const order = responseJson.order;",
							"    const item = order.items[0];",
							"    const expectedTotalPrice = item.price * item.quantity;",
							"",
							"    pm.expect(order).to.have.property(\"totalPrice\", expectedTotalPrice);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"productId\":1,\"quantity\":1}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/orders/{{ORDER_REF}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"orders",
						"{{ORDER_REF}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Orders History",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches the schema\", function () {",
							"    const schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            success: { type: \"boolean\" },",
							"            orders: {",
							"                type: \"array\",",
							"                items: {",
							"                    type: \"object\",",
							"                    properties: {",
							"                        _id: { type: \"string\" },",
							"                        username: { type: \"string\" },",
							"                        items: {",
							"                            type: \"array\",",
							"                            items: {",
							"                                type: \"object\",",
							"                                properties: {",
							"                                    productId: { type: \"number\" },",
							"                                    name: { type: \"string\" },",
							"                                    quantity: { type: \"number\" },",
							"                                    price: { type: \"number\" },",
							"                                    _id: { type: \"string\" }",
							"                                },",
							"                                required: [\"productId\", \"name\", \"quantity\", \"price\", \"_id\"]",
							"                            }",
							"                        },",
							"                        totalPrice: { type: \"number\" },",
							"                        status: { type: \"string\" },",
							"                        createdAt: { type: \"string\", format: \"date-time\" },",
							"                        __v: { type: \"number\" }",
							"                    },",
							"                    required: [\"_id\", \"username\", \"items\", \"totalPrice\", \"status\", \"createdAt\", \"__v\"]",
							"                }",
							"            }",
							"        },",
							"        required: [\"success\", \"orders\"]",
							"    };",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"productId\":1,\"quantity\":1}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/orders",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Cart cleared successfully\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/cart",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains the correct message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\", \"User removed successfully\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"U_NAME\");",
							"const password = pm.environment.get(\"U_PASSWORD\");",
							"const baseUrl = pm.environment.get(\"BASE_URL\");",
							"",
							"pm.sendRequest({",
							"    url: `${baseUrl}/users/login`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({ username, password }),",
							"    },",
							"}, function (err, response) {",
							"    if (response.code === 200) {",
							"        const token = response.json().token;",
							"        pm.environment.set(\"TOKEN\", token);",
							"        console.log(\"Token saved:\", token);",
							"    } else {",
							"        console.log(\"Login failed:\", response.json());",
							"        throw new Error(\"Authentication failed\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/users/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 200ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(200);",
					"});",
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});",
					"",
					"pm.test(\"Content-Type is json\", function () {",
					"    let contentType = pm.response.headers.get('Content-Type');",
					"    pm.expect(contentType).to.include('application/json')",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:3000"
		}
	]
}