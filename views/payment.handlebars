<div class="container">
    <div class="sr-root">
        <div class="sr-main">
            <form id="payment-form" class="sr-payment-form">
                <div class="sr-combo-inputs-row">
                    <div class="sr-input sr-card-element" id="card-element"></div>
                </div>
                <div class="sr-field-error" id="card-errors" role="alert"></div>
                <button id="submit" class="payment-button">
                    <div class="spinner hidden" id="spinner"></div>
                    <span id="button-text">Pay</span><span id="order-amount"></span>
                </button>
            </form>
            <div class="sr-result hidden">
                <p>Payment completed<br /></p>
                <pre>
            <code></code>
          </pre>
            </div>
        </div>
    </div>
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        var stripe;

        var orderData = {
            items: [{ id: "photo-subscription" }],
            currency: "usd"
        };

        // Disable the button until we have Stripe set up on the page
        document.querySelector("#submit").disabled = true;

        fetch("/cart/stripe-key")
            .then(function (result) {
                console.log(JSON.stringify(result))
                return result.json();
            })
            .then(function (data) {
                console.log(JSON.stringify(data))
                return setupElements(data);
            })
            .then(function ({ stripe, card, clientSecret }) {
                document.querySelector("#submit").disabled = false;

                var form = document.getElementById("payment-form");
                form.addEventListener("submit", function (event) {
                    event.preventDefault();
                    pay(stripe, card, clientSecret);
                });
            });

        var setupElements = function (data) {
            stripe = Stripe(data.publishableKey);
            /* ------- Set up Stripe Elements to use in checkout form ------- */
            var elements = stripe.elements();
            var style = {
                base: {
                    color: "#32325d",
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: "antialiased",
                    fontSize: "16px",
                    "::placeholder": {
                        color: "#aab7c4"
                    }
                },
                invalid: {
                    color: "#fa755a",
                    iconColor: "#fa755a"
                }
            };

            var card = elements.create("card", { style: style });
            card.mount("#card-element");

            return {
                stripe: stripe,
                card: card,
                clientSecret: data.clientSecret
            };
        };

        var handleAction = function (clientSecret) {
            stripe.handleCardAction(clientSecret).then(function (data) {
                if (data.error) {
                    showError("Your card was not authenticated, please try again");
                } else if (data.paymentIntent.status === "requires_confirmation") {
                    fetch("/cart/pay", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            paymentIntentId: data.paymentIntent.id
                        })
                    })
                        .then(function (result) {
                            return result.json();
                        })
                        .then(function (json) {
                            if (json.error) {
                                showError(json.error);
                            } else {
                                orderComplete(clientSecret);
                            }
                        });
                }
            });
        };

        /*
         * Collect card details and pay for the order
         */
        var pay = function (stripe, card) {
            changeLoadingState(true);

            // Collects card details and creates a PaymentMethod
            stripe
                .createPaymentMethod("card", card)
                .then(function (result) {
                    if (result.error) {
                        showError(result.error.message);
                    } else {
                        orderData.paymentMethodId = result.paymentMethod.id;

                        return fetch("/cart/pay", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(orderData)
                        });
                    }
                })
                .then(function (result) {
                    return result.json();
                })
                .then(function (response) {
                    if (response.error) {
                        showError(response.error);
                    } else if (response.requiresAction) {
                        // Request authentication
                        handleAction(response.clientSecret);
                    } else {
                        orderComplete(response.clientSecret);
                    }
                });
        };

        /* ------- Post-payment helpers ------- */

        /* Shows a success / error message when the payment is complete */
        var orderComplete = function (clientSecret) {
            stripe.retrievePaymentIntent(clientSecret).then(function (result) {
                var paymentIntent = result.paymentIntent;
                var paymentIntentJson = JSON.stringify(paymentIntent, null, 2);

                document.querySelector(".sr-payment-form").classList.add("hidden");
                document.querySelector("pre").textContent = paymentIntentJson;

                document.querySelector(".sr-result").classList.remove("hidden");
                setTimeout(function () {
                    document.querySelector(".sr-result").classList.add("expand");
                }, 200);

                changeLoadingState(false);
            });
        };

        var showError = function (errorMsgText) {
            changeLoadingState(false);
            var errorMsg = document.querySelector(".sr-field-error");
            errorMsg.textContent = errorMsgText;
            setTimeout(function () {
                errorMsg.textContent = "";
            }, 4000);
        };

        // Show a spinner on payment submission
        var changeLoadingState = function (isLoading) {
            if (isLoading) {
                document.querySelector("button").disabled = true;
                document.querySelector("#spinner").classList.remove("hidden");
                document.querySelector("#button-text").classList.add("hidden");
            } else {
                document.querySelector("button").disabled = false;
                document.querySelector("#spinner").classList.add("hidden");
                document.querySelector("#button-text").classList.remove("hidden");
            }
        };
    </script>

</div>